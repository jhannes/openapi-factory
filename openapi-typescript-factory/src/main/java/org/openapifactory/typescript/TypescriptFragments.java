package org.openapifactory.typescript;

import org.openapifactory.api.codegen.CodegenProperty;
import org.openapifactory.api.codegen.types.CodegenAnonymousObjectModel;
import org.openapifactory.api.codegen.CodegenApi;
import org.openapifactory.api.codegen.types.CodegenArrayType;
import org.openapifactory.api.codegen.types.CodegenConstantType;
import org.openapifactory.api.codegen.types.CodegenEmbeddedEnumType;
import org.openapifactory.api.codegen.types.CodegenModel;
import org.openapifactory.api.codegen.CodegenParameter;
import org.openapifactory.api.codegen.types.CodegenPrimitiveType;
import org.openapifactory.api.codegen.CodegenProp;
import org.openapifactory.api.codegen.types.CodegenRecordType;
import org.openapifactory.api.codegen.types.CodegenType;
import org.openapifactory.api.codegen.types.CodegenTypeRef;
import org.openapifactory.api.codegen.OpenapiSpec;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.openapifactory.api.StringUtil.join;
import static org.openapifactory.api.StringUtil.toLowerCamelCase;
import static org.openapifactory.api.StringUtil.toUpperCamelCase;

public class TypescriptFragments {
    public static String propertyDefinition(CodegenProp p) {
        return getPropName(p) + (p.isRequired() && p.getType().hasNoRequiredProperties() ? "" : "?") +
               ": " + getTypeName(p.getType()) + (p.isNullable() ? " | null" : "");
    }

    public static String variableName(CodegenType type) {
        if (type instanceof CodegenAnonymousObjectModel) {
            return "dto";
        }
        if (type instanceof CodegenArrayType arrayType) {
            return variableName(arrayType.getItems());
        }
        return toLowerCamelCase(getTypeName(type));
    }

    public static String getPropName(CodegenProp p) {
        if (p.getName() == null) {
            return variableName(p.getType());
        }
        return p.getName();
    }

    public static String getTypeName(CodegenType type) {
        if (type instanceof CodegenTypeRef refType) {
            return getTypeName(refType.getReferencedType());
        } else if (type instanceof CodegenModel model) {
            return model.getName() + "Dto";
        } else if (type instanceof CodegenAnonymousObjectModel objectType) {
            return "{ " + join("; ", objectType.getProperties().values(), TypescriptFragments::propertyDefinition) + "; }";
        } else if (type instanceof CodegenEmbeddedEnumType enumModel) {
            if (enumModel.getDeclaredProperty() instanceof CodegenProperty prop) {
                return getTypeName(prop.getModel()) + toUpperCamelCase(prop.getName()) + "Enum";
            }
            return join(" | ", enumModel.getValues(), s -> "\"" + s + "\"");
        } else if (type instanceof CodegenArrayType arrayType) {
            return getCollectionType(arrayType) + "<" + getTypeName(arrayType.getItems()) + ">";
        } else if (type instanceof CodegenRecordType objectType) {
            return "{ [key: string]: " + getTypeName(objectType.getAdditionalProperties()) + "; }";
        } else if (type instanceof CodegenConstantType constant) {
            return "\"" + constant.getValue() + "\"";
        } else if (type instanceof CodegenPrimitiveType primitive) {
            if (primitive.getType().equals("string") && primitive.getFormat() != null) {
                return Map.of("date-time", "Date", "date", "Date", "binary", "Blob")
                        .getOrDefault(primitive.getFormat(), primitive.getType());
            } else {
                return Map.of("integer", "number", "float", "number", "object", "unknown")
                        .getOrDefault(primitive.getType(), primitive.getType());
            }
        } else {
            throw new IllegalArgumentException("Not supported " + type);
        }
    }

    public static String propertiesDefinition(List<CodegenParameter> parameters) {
        return parameters
                .stream()
                .map(TypescriptFragments::propertyDefinition)
                .collect(Collectors.joining(", "));
    }

    public static String documentationSection(OpenapiSpec spec) {
        var contact = spec.getContact().map(c -> " Contact: " + c.getEmail()).orElse("");
        return """
                /**
                 * %s
                 * %s
                 *
                 * The version of the OpenAPI document: %s
                 *%s
                 *
                 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                 * https://openapi-generator.tech
                 * Do not edit the class manually.
                 */
                """.formatted(spec.getTitle(), spec.getDescription(), spec.getVersion(), contact);
    }

    public static String getRequestTypeName(CodegenType type) {
        if (!type.hasReadOnlyProperties()) {
            return getTypeName(type);
        } else if (type instanceof CodegenArrayType arrayType) {
            return getCollectionType(arrayType) + "<" + getRequestTypeName(arrayType.getItems()) + ">";
        }
        return getTypeName(type) + "Request";
    }

    public static String getResponseTypeName(CodegenType type) {
        if (!type.hasWriteOnlyProperties()) {
            return getTypeName(type);
        } else if (type instanceof CodegenArrayType arrayType) {
            return getCollectionType(arrayType) + "<" + getResponseTypeName(arrayType.getItems()) + ">";
        }
        return getTypeName(type) + "Response";
    }

    private static String getCollectionType(CodegenArrayType arrayType) {
        return arrayType.isUniqueItems() ? "Set" : "Array";
    }

    public static String getApiName(CodegenApi api) {
        return toUpperCamelCase(api.getTag()) + "Api";
    }
}
