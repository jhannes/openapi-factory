/**
 * Poly API
 * An example of a polymorphic API
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: johannes@brodwall.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export type AnyPartyDto =
    { type: "person" } & PersonDto |
    { type: "organization" } & OrganizationDto;

export const AnyPartyDtoDiscriminators = [
    "person",
    "organization",
] as const;

export type AnyPartyDtoDiscriminator = typeof AnyPartyDtoDiscriminators[number];

export type CreationErrorDto =
    { code: "generalError" } & GeneralErrorDto |
    { code: "networkError" } & GeneralErrorDto |
    { code: "duplicateIdentifier" } & DuplicateIdentifierErrorDto |
    { code: "illegalAddress" } & IllegalEmailAddressErrorDto;

export const CreationErrorDtoDiscriminators = [
    "generalError",
    "networkError",
    "duplicateIdentifier",
    "illegalAddress",
] as const;

export type CreationErrorDtoDiscriminator = typeof CreationErrorDtoDiscriminators[number];

export interface DuplicateIdentifierErrorDto {
    code: string;
    identifierValue?: string;
    entityType: string;
}

export interface GeneralErrorDto {
    code: string;
    description: string;
}

export interface IllegalEmailAddressErrorDto {
    code: string;
    inputEmailAddress: string;
    validDomains: Array<string>;
}

export interface LogMessageDto {
    message: string;
    error?: unknown;
}

export interface NotFoundErrorDto {
    code: string;
    identifierValue?: string;
    entityType: string;
}

export interface OrganizationDto {
    id?: string;
    type: string;
    name: string;
    organizationId?: string;
    url?: string;
    email?: string;
    emailDomains?: Array<string>;
    phone?: string;
}

export interface PersonDto {
    id?: string;
    type: string;
    givenName: string;
    familyName: string;
    email?: string;
    phone?: string;
    birthDate?: Date;
}

export type UpdateErrorDto =
    { code: "generalError" } & GeneralErrorDto |
    { code: "networkError" } & GeneralErrorDto |
    { code: "notFound" } & NotFoundErrorDto |
    { code: "duplicateIdentifier" } & DuplicateIdentifierErrorDto |
    { code: "illegalAddress" } & IllegalEmailAddressErrorDto;

export const UpdateErrorDtoDiscriminators = [
    "generalError",
    "networkError",
    "notFound",
    "duplicateIdentifier",
    "illegalAddress",
] as const;

export type UpdateErrorDtoDiscriminator = typeof UpdateErrorDtoDiscriminators[number];
